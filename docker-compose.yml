version: "3"

services:
  auth-service:
    container_name: auth-service
    build:
      context: .
      dockerfile: ./apps/auth-service/Dockerfile
    restart: always
    network_mode: host
    environment:
      - JWT_SECRET=${JWT_SECRET}

      - DATABASE_HOST=${DATABASE_HOST}
      - DATABASE_PORT=${DATABASE_PORT}
      - DATABASE_USERNAME=${DATABASE_USERNAME}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_DB=${DATABASE_DB}

      - RMQ_HOST=${RMQ_HOST}
      - RMQ_PORT=${RMQ_PORT}
      - RMQ_USER=${RMQ_USER}
      - RMQ_PASS=${RMQ_PASS}
    depends_on:
      db:
        condition: service_started
      rabbitmq:
        condition: service_healthy

  tasks-service:
    container_name: tasks-service
    build:
      context: .
      dockerfile: ./apps/tasks-service/Dockerfile
    restart: always
    network_mode: host
    environment:
      - DATABASE_HOST=${DATABASE_HOST}
      - DATABASE_PORT=${DATABASE_PORT}
      - DATABASE_USERNAME=${DATABASE_USERNAME}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_DB=${DATABASE_DB}

      - RMQ_HOST=${RMQ_HOST}
      - RMQ_PORT=${RMQ_PORT}
      - RMQ_USER=${RMQ_USER}
      - RMQ_PASS=${RMQ_PASS}
    depends_on:
      db:
        condition: service_started
      rabbitmq:
        condition: service_healthy

  notifications-service:
    container_name: notifications-service
    build:
      context: .
      dockerfile: ./apps/notifications-service/Dockerfile
    restart: always
    network_mode: host
    environment:
      - DATABASE_HOST=${DATABASE_HOST}
      - DATABASE_PORT=${DATABASE_PORT}
      - DATABASE_USERNAME=${DATABASE_USERNAME}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_DB=${DATABASE_DB}

      - RMQ_HOST=${RMQ_HOST}
      - RMQ_PORT=${RMQ_PORT}
      - RMQ_USER=${RMQ_USER}
      - RMQ_PASS=${RMQ_PASS}
    depends_on:
      db:
        condition: service_started
      rabbitmq:
        condition: service_healthy

  api-gateway:
    container_name: api-gateway
    build:
      context: .
      dockerfile: ./apps/api-gateway/Dockerfile
      network: host
    restart: always
    network_mode: host
    environment:
      - PORT=${API_PORT}
      - RMQ_HOST=${RMQ_HOST}
      - RMQ_PORT=${RMQ_PORT}
      - RMQ_USER=${RMQ_USER}
      - RMQ_PASS=${RMQ_PASS}
    depends_on:
      auth-service:
        condition: service_started
      tasks-service:
        condition: service_started
      notifications-service:
        condition: service_started
      db:
        condition: service_started
      rabbitmq:
        condition: service_healthy

  web-app:
    container_name: web-app
    build:
      context: .
      dockerfile: ./apps/web-app/Dockerfile
      network: host
    restart: always
    network_mode: host
    ports:
      - 3000:3000
    environment:
      - VITE_API_BASE_URL=http://localhost:${API_PORT}/api
      - VITE_WEBSOCKET_URL=http://localhost:3335
    depends_on:
      api-gateway:
        condition: service_started

  # Postgres Database
  db:
    image: postgres:17.5-alpine3.21
    container_name: db
    attach: false
    network_mode: host
    ports:
      - "5432:5432"
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_USER=${DATABASE_USERNAME}
      - POSTGRES_DB=${DATABASE_DB}

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    container_name: rabbitmq
    attach: false
    restart: always
    network_mode: host
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    volumes: ["rabbitmq_data:/var/lib/rabbitmq"]
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "5672"]
      interval: 10s
      timeout: 15s
      retries: 10

volumes:
  postgres_data:
    driver: local
  rabbitmq_data:
    driver: local
